1.What instruction is “int a, b, c, d;” converted to? 

 subl $16,%esp

2.Does “int a, b, c, d;” shrink or grow the stack? How many bytes are allocated on stack for a, b, c, and d? Explain them using instruction from question 1.
It grows the stack, as shown by the subtraction. Each variable is allocated 4 bytes each since it is type integer. In total there will be 16 bytes allocated.

3.What instruction is “b=2;” converted to? How is the address of variable b formed in the instruction?
B is converted to:

movl $2,-8(%ebp)

The address of variable B is formed in the instruction by putting the value at address -8(%ebp).
It will be at a higher address than variable a since the stack grows downward.

4.Based on the instructions converted from four assignments, can we claim the declaration order determines the allocation order? For instance, a is declared before b, does it mean a is to be allocated before b on stack? Verify your theory by changing the declaration to “int a, c, b, d;”
It does matter, because how you declare them is how they are initialized in the stack. When we swapped the order of b and c to confirm, it moved b to a higher address in the stack. Usually c would be placed higher in the stack because it is declared after b.